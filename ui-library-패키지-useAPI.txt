ui-library-패키지-useAPI

useAPI()
- 서버로부터 데이터를 가져와 전역상태(Redux)에 저장하고, 가져온 데이터를 화면에서 사용하기 위한 hook입니다.
- useAPI 훅을 사용하기위해서는 우선 각 업무의 store/index.tx 파일에 REST API의 action이 생성되어 있어야 함

- useAPI type
	export const useAPI = (	
		key : string,
	) : { data : IRootState<ResponseType>;  fetch : (arg? : object) => Promise<any>; setData: any }

- import
	import { useAPI } from '@nova/ui-library/store';

- 사용예제
	import type { IComponent } from '@nova/ui-library/types';
	import { useAPI } from '@nova/ui-library/store';

	interface IMainIndexProps {
	}

	const MainIndex : ICompont<IMainIndexProps> = () : JSX.Element => {
		// REST API를 사용하기 위하여 useAPI 훅을 사용하고 파라미터로 ActionType을 넘겨준다.
		const { data: sData, fetch: sFetch } = useAPI('cmCbStore/search');
		
		// 버튼 눌렀을 때 api호출  handler
		const handlerApi = () => {
			// 구조분해로 가져온  sData 데이터를 사용할 수도 있고
			// Promise 객체로 넘어온 then에서 테이터를 사용할 수도 있음.
			sFetch().then(res: any) => {
				console.log(res);
			});
		};
		
		return (
			<>
				<div className="content">
					<div>{JSON.stringify(sData)}</div>
					<br/>
					<button
						variant = "solid"
						onClick = {handlerApi}
					>
						api 테스트
					</button>
				</div>
			</>
		);		
	} ;
	
	MainIndex.displayName = 'MainIndex';
	export default MainIndex;
	
* 코드설명
- import { useAPI } from '@nova/ui-library/store';  useAPI 훅을 가져옵니다.
- const { data , fetch } = useAPI('cmCbStore/search'); search API를 사용하기 위하여 화면 함수 상단에 useAPI 훅
  을 이용하여 { data, fetch } 을 가져옵니다.
  파라미터에는 이전 store/index.ts에 등록했던 actionType을 입력한다.
- useAPI 함수 리턴 객체
	* data : response data가 담겨있는 state, (fetch호출 후 확인해보면 데니터가 담겨 있습니다.)
	* fetch : Promise 객체를 리턴하는 함수이며 API를 호출할때 사용합니다.
	* setData : 전역 상태(state)값을 변경하고자할때 사용하는 set함수.

- 다음과 같이 한 페이지에 API호출이 많이 있을 경우에는 data, fetch의 별칭을 사용합니다.
	const { data: searchData, fetch: fetchSearch } = useAPI('cmCbStore/search');
	const { data: newsData, fetch: detchNews } = useAPI('cmCbStore/newList');
	const { data: noticeData, fetch: fetchNotice } = useAPI('cmCbStore/notice');

- fetch함수는 Promise객체를 리턴하기 때문에 바로 response 테이터를 받아서 쓸 수도 있습니다.
	fetch({foo: 'bar'}).then((response: any) => {
		// response 데이터를 바로 받아서 사용할 수 있습니다.
		console.log('fetch()결과 데이터 : ' , response);
	}); 
	
- fetch함수를 사용할 때 다음과 같이 옵션 파라미터를 사용할 수 있습니다. 옵션 내용은 아래쪽에 따로 정리합니다.
	fetch({_fetchOption_ : {method: 'post' } });
	
- fetch() API호출 시 fetch옵션('_fetchOption_') 사용 방법
	* fetch() 함수 사용 형식
		fetch({ query: 'foo' , tags: 'story', _fetchOption_ : { method : 'post' , } });
		
	* _fetchOption_ 파라미터 값 종류
		- fetch() 함수 사용 형식
			fetch({query : 'foo' , tags : 'story' , _fetchOption_ : { method : 'post' , } });
		- _fetchOption_ 파라미터 값 종류
			옵션파라미터 명  = method  
			타입 = string
			기본값 = 'get'
			입력 가능 값 = 'post' , 'get' , 'delete' , 'put'
			
			headers
			object
			{ 'Content-Type' : 'application/json;charset=UTF-8', Accept : 'application/json'}
			http header
			
			allowDuplicate, disableLoadingSpinner
			boolean
			false
			true, false
			
			params
			object
			undefined
			api url에 입력한 변수명
			
		- 옵션 설명
			* method : rest api호출 시 요청 method 를 변경 할 수 있습니다.
			* headers : rest api호출 시 header 정보를 전송 할수 있다. 기본값이 있기때문에 거의 사용되지 않음.
			* allowDuplicate : rest api호출 시 중복호출 방지 로직을 사용할지 여부 값. 
			* disableLoadingSpinner : rest api호출 시 로딩 이미지가 기본으로 뜨는데 이것을 사용할지 여부를 정할 수 있습니다.
			* params : rest api호출 url에 dynamic url을 설정했을 때 사용하는 값.
				//아래와 같은 api url이라고 가정한다면, 변수 no가 params에 보내져야 한다.
				export default {
					BOARD_DELETE : '/api/pilot/board/delete/:no';
				};
				
				//api호출 시 option의 params에 넣어줄 no값
				fetch({
					_fetchOption_ : { params : { no : '123', },},
				})
		
- 각 method 호출 유형별 fetch() 호출 방법 예시
	* get
		const { data , fetch } = useAPI('cmCbStore/search');
		
		// 파라미터가 없는경우
		fetch();
		// 파라미터가 있는경우
		fetch({ query: 'foo' , tags: 'story' });
		// _fetchOption_ 옵션 설정을 함께 사용한 경우
		fetch({ query: 'foo' , tags : 'story' , _fetchOption_ : { method : 'get' ,} });
		// dyamic url을 사용하는 경우 , ex) '/api/pilot/board/delete/:no'
		fetch({ query : 'foo' , tags : 'story' , _fetchOption_ : { params : { no: '123' , }, } });
		
	* post
		const { data , fetch } = useAPI('cmCbStore/search');
		
		// 파라미터가 없는 경우
		fetch({_fetchOpton :{ mehod : 'post' , } });
		// 파라미터가 있는 경우
		fetch({ query: 'foo', tags: 'story' , _fetchOption_ : {method: 'post' ,} });
		// dyamic url를 사용하는 경우 , ex) '/api/pilot/poard/delete/:no'
		fetch({ query: ' foo' , tags : 'story' , _fetchOption_ : { metchod : 'post' , params : {no: '123' , } , } }); 
		
	* put
		const { data , fetch } = useAPI('cmCbStore/search');
		
		// 파라미터가 없는 경우
		fetch({_fetchOpton :{ mehod : 'put' , } });
		// 파라미터가 있는 경우
		fetch({ query: 'foo', tags: 'story' , _fetchOption_ : {method: 'put' ,} });
		// dyamic url를 사용하는 경우 , ex) '/api/pilot/poard/delete/:no'
		fetch({ query: ' foo' , tags : 'story' , _fetchOption_ : { metchod : 'put' , params : {no: '123' , } , } }); 
		
	* delete
		보낼 데이터가 없기 때문에 다음과 같이 세팅합니다.
		const  {data, fetch} = useAPI('cmCbStore/search');
		
		fetch({ _fetchOption_ : {method: 'delete' , }  });
		// dyamic url를 사용하는 경우 , ex) '/api/pilot/poard/delete/:no'
		fetch({ _fetchOption_ : { metchod : 'delete' , params : {no: '123' , } , } }); 
